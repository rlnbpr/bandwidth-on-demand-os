// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.surfnet.bod.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.surfnet.bod.domain.PhysicalPort;
import nl.surfnet.bod.domain.PhysicalResourceGroup;
import nl.surfnet.bod.domain.PhysicalResourceGroupDataOnDemand;
import nl.surfnet.bod.repo.PhysicalPortRepo;
import nl.surfnet.bod.service.PhysicalPortService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PhysicalPortDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhysicalPortDataOnDemand: @Component;
    
    private Random PhysicalPortDataOnDemand.rnd = new SecureRandom();
    
    private List<PhysicalPort> PhysicalPortDataOnDemand.data;
    
    @Autowired
    private PhysicalResourceGroupDataOnDemand PhysicalPortDataOnDemand.physicalResourceGroupDataOnDemand;
    
    @Autowired
    PhysicalPortService PhysicalPortDataOnDemand.physicalPortService;
    
    @Autowired
    PhysicalPortRepo PhysicalPortDataOnDemand.physicalPortRepo;
    
    public PhysicalPort PhysicalPortDataOnDemand.getNewTransientPhysicalPort(int index) {
        PhysicalPort obj = new PhysicalPort();
        setName(obj, index);
        setPhysicalResourceGroup(obj, index);
        return obj;
    }
    
    public void PhysicalPortDataOnDemand.setName(PhysicalPort obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void PhysicalPortDataOnDemand.setPhysicalResourceGroup(PhysicalPort obj, int index) {
        PhysicalResourceGroup physicalResourceGroup = physicalResourceGroupDataOnDemand.getRandomPhysicalResourceGroup();
        obj.setPhysicalResourceGroup(physicalResourceGroup);
    }
    
    public PhysicalPort PhysicalPortDataOnDemand.getSpecificPhysicalPort(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        PhysicalPort obj = data.get(index);
        java.lang.Long id = obj.getId();
        return physicalPortService.findPhysicalPort(id);
    }
    
    public PhysicalPort PhysicalPortDataOnDemand.getRandomPhysicalPort() {
        init();
        PhysicalPort obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return physicalPortService.findPhysicalPort(id);
    }
    
    public boolean PhysicalPortDataOnDemand.modifyPhysicalPort(PhysicalPort obj) {
        return false;
    }
    
    public void PhysicalPortDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = physicalPortService.findPhysicalPortEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'PhysicalPort' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<nl.surfnet.bod.domain.PhysicalPort>();
        for (int i = 0; i < 10; i++) {
            PhysicalPort obj = getNewTransientPhysicalPort(i);
            try {
                physicalPortService.savePhysicalPort(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            physicalPortRepo.flush();
            data.add(obj);
        }
    }
    
}
